{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStatSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4614c33d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2'>\r\n            <img alt='robo' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( \r\n        <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return ( \r\n                        <Card \r\n                            key={robots[i].id} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search your Friend'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className='scroll-area'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render (){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops Something is not working</h1>\r\n        }\r\n        return this.props.children\r\n        \r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    } \r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n\r\n    render (){\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>robo friends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n// SYNCHRONUS WAY\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n} \r\n\r\n// ASYNCHRONUS WAY\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst intialStatSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStatSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n  \r\n\r\nconst intialStateRobots = {\r\n    isPending : false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware  from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}